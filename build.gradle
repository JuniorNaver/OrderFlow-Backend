plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.youthcase'
version = '0.0.1-SNAPSHOT'
description = 'Smart ERP-MM System for Convenience Store'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // ===========================
    // 🌱 Spring Boot 기본 의존성
    // ===========================
    implementation 'org.springframework.boot:spring-boot-starter-web'           // MVC REST API
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'      // ORM + JPA
    implementation 'org.springframework.boot:spring-boot-starter-security'      // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'     // 템플릿 엔진
    implementation 'org.springframework.boot:spring-boot-starter-validation'    // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-mail'          // Gmail SMTP 지원
    implementation 'org.springframework.boot:spring-boot-starter-webflux'       // 논블로킹 WebFlux

    // 개발 편의 기능 (자동 재시작 등)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Oracle JDBC 드라이버
    runtimeOnly 'com.oracle.database.jdbc:ojdbc11'

    // ===========================
    // 🧩 Thymeleaf 확장
    // ===========================
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.0'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // ===========================
    // 🔐 JWT 관련
    // ===========================
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // ===========================
    // ⚙️ DTO/Entity 매핑 및 JSON
    // ===========================
    implementation 'org.modelmapper:modelmapper:3.2.1'
    implementation 'com.google.code.gson:gson:2.10.1'

    // ===========================
    // 🧱 Lombok (보일러플레이트 제거)
    // ===========================
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // ===========================
    // 🧪 테스트 관련
    // ===========================
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // ===========================
    // 🔧 환경 변수 관리 (.env 지원)
    // ===========================
    // spring.config.import: optional:file:.env[.properties] 구문을 사용하면
    // Spring Boot 3.5부터 별도 라이브러리 없이 동작하지만,
    // 환경 변수 파싱이 필요한 경우 아래 라이브러리를 추가로 사용 가능
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

