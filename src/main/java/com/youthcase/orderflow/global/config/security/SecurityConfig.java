package com.youthcase.orderflow.global.config.security;

import com.youthcase.orderflow.auth.filter.JwtAuthenticationFilter;
import com.youthcase.orderflow.auth.provider.JwtProvider;
import com.youthcase.orderflow.auth.handler.JwtAuthenticationEntryPoint;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtProvider jwtProvider;

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    /**
     * Spring Security ÌïÑÌÑ∞ Ï≤¥Ïù∏ ÏÑ§Ï†ï
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .cors(Customizer.withDefaults())
                .csrf(AbstractHttpConfigurer::disable)
                .httpBasic(AbstractHttpConfigurer::disable)
                .sessionManagement(session -> session
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                // 4. URLÎ≥Ñ Ï†ëÍ∑º Í∂åÌïú ÏÑ§Ï†ï (Ïù∏Ï¶ù Ï†ïÏ±Ö ÌôúÏÑ±Ìôî)
                .authorizeHttpRequests(authorize -> authorize
                        // Ïù∏Ï¶ù/Ïû¨Î∞úÍ∏â/ÌöåÏõêÍ∞ÄÏûÖ/ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞ Îì±ÏùÄ Ïù∏Ï¶ù ÏóÜÏù¥ ÌóàÏö©
                        .requestMatchers("/api/auth/login", "/api/auth/reissue", "/api/auth/register", "/api/auth/password/**").permitAll()

                        // /api/auth/users/meÎäî Ïù∏Ï¶ù ÌïÑÏöî
                        .requestMatchers("/api/auth/users/me").authenticated()

                        // üí° ÏàòÏ†ï: Í≤åÏãúÌåê, Î©îÏù∏, Í≥µÌÜµ, BI Í≤ΩÎ°úÎ•º Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌóàÏö©
                        // Home.jsxÍ∞Ä Ìò∏Ï∂úÌïòÎäî BI API Ï†ëÍ∑ºÏùÑ ÌóàÏö©Ìï©ÎãàÎã§.
                        .requestMatchers("/board/**", "/api/dashboard", "/api/main/**", "/api/common/**", "/api/bi/**").authenticated()

                        // Í¥ÄÎ¶¨Ïûê Í≤ΩÎ°úÎäî ADMIN Ïó≠Ìï† ÌïÑÏöî
                        .requestMatchers("/api/admin/**").hasRole("ADMIN")

                        // ÏòàÏãú: ÏÉÅÌíà Î™©Î°ù Ï°∞ÌöåÎäî Î™®Îëê ÌóàÏö©, Îì±Î°ù/ÏàòÏ†ï/ÏÇ≠Ï†úÎäî Í∂åÌïú ÌïÑÏöî
                        .requestMatchers(HttpMethod.GET, "/api/products/**").permitAll()
                        .requestMatchers(HttpMethod.POST, "/api/products/**").hasAnyRole("ADMIN", "MANAGER")

                        // Í∑∏ Ïô∏ Î™®Îì† ÏöîÏ≤≠ÏùÄ Ïù∏Ï¶ù ÌïÑÏöî
                        .anyRequest().authenticated()
                )

                // 5. ÏòàÏô∏ Ï≤òÎ¶¨ ÏÑ§Ï†ï
                .exceptionHandling(exceptions -> exceptions
                        .authenticationEntryPoint(new JwtAuthenticationEntryPoint())
                )

                // 6. JWT ÌïÑÌÑ∞ Îì±Î°ù
                .addFilterBefore(
                        new JwtAuthenticationFilter(jwtProvider),
                        UsernamePasswordAuthenticationFilter.class
                );

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
}
